import logging

MASAKHANER_LANGUAGES = [
    "amh", "hau", "ibo", "kin", "lug", "luo", "pcm", "swa", "wol", "yor"]


MASAKHANER2_LANGUAGES = [
    "bam", "bbj", "ewe", "fon", "hau", "ibo", "kin", "lug", "mos", "nya",
    "pcm", "sna", "swa", "tsn", "twi", "wol", "xho", "yor", "zul"]


NLLB_CODES = {
    "amh": "amh_Ethi",
    "bam": "bam_Latn",
    "bbj": "fra_Latn", # MISSING
    "ewe": "ewe_Latn",
    "fon": "fon_Latn",
    "hau": "hau_Latn",
    'ibo': "ibo_Latn",
    'kin': "kin_Latn",
    'lug': "lug_Latn",
    'luo': "luo_Latn",
    'mos': "mos_Latn",
    'nya': "nya_Latn",
    'pcm': "eng_Latn", # MISSING
    'spa': "spa_Latn",
    'sna': "sna_Latn",
    'swa': "swh_Latn",
    'tha': "tha_Thai",
    'tsn': "tsn_Latn",
    'twi': "twi_Latn",
    'wol': "wol_Latn",
    'xho': "xho_Latn",
    'yor': "yor_Latn",
    'zho': "zho_Hans",
    'zul': "zul_Latn",
}


ENTS = ["PER", "ORG", "LOC", "DATE"]

TAG_LIST = [
    "O", "B-PER", "I-PER", "B-ORG", "I-ORG", "B-LOC", "I-LOC", "B-DATE",
    "I-DATE"]

SPACY_TYPES = ["PERSON", "ORG", "LOC", "DATE", "GPE", "TIME"]


rule all:
    input:
        #expand("masakhaner_experiments/{ner_method}/{lang}/{split}.score",
        #       lang=MASAKHANER_LANGUAGES,
        #       ner_method=["spacy", "tner-ontonotes5", "tner-conll2003"],
        #       split=["validation", "test"]),
        expand("masakhaner2_experiments/{ner_method}/{lang}/{split}.score",
               lang=MASAKHANER2_LANGUAGES,
               ner_method=["spacy", "tner-ontonotes5", "tner-conll2003"],
               split=["validation", "test"]),
        expand("masakhaner_data/{lng}/train.eng-tags", lng=MASAKHANER_LANGUAGES),
        expand("masakhaner2_data/{lng}/train.eng-tags", lng=MASAKHANER2_LANGUAGES),
        "finetune_tner/best_model",


rule download_masakhaner:
    output:
        text_file="masakhaner_data/{lang}/{split}.txt",
        tags_file="masakhaner_data/{lang}/{split}.tags"
    run:
        import datasets
        test_data = datasets.load_dataset(
            "masakhaner", wildcards.lang)[wildcards.split]
        f_text = open(output.text_file, "w")
        f_tags = open(output.tags_file, "w")
        for item in test_data:
            f_text.write(
                " ".join(item['tokens']) + "\n")
            f_tags.write(
                " ".join(TAG_LIST[idx] for idx in item['ner_tags']) + "\n")

        f_text.close()
        f_tags.close()


rule download_masakhaner2:
    output:
        text_file="masakhaner2_data/{lang}/{split}.txt",
        tags_file="masakhaner2_data/{lang}/{split}.tags"
    run:
        import datasets
        test_data = datasets.load_dataset(
            "masakhane/masakhaner2", wildcards.lang)[wildcards.split]
        f_text = open(output.text_file, "w")
        f_tags = open(output.tags_file, "w")
        for item in test_data:
            f_text.write(
                " ".join(item['tokens']) + "\n")
            f_tags.write(
                " ".join(TAG_LIST[idx] for idx in item['ner_tags']) + "\n")

        f_text.close()
        f_tags.close()


rule translate_input_text:
    input:
        src_text="{dataset}_data/{lang}/{split}.txt"
    output:
        tgt_text="{dataset}_data/{lang}/{split}.eng"
    resources:
        mem="40G",
        cpus_per_task=8,
        partition="gpu-troja,gpu-ms",
        flags="--gres=gpu:1"
    run:
        from transformers import pipeline
        import torch

        logger = logging.getLogger("translate")
        logger.setLevel(logging.INFO)

        logger.info("Loading model.")
        pipe = pipeline(
            "translation", model="facebook/nllb-200-3.3B", device=0)
        logger.info("Model loaded. Loading source text.")
        with open(input.src_text) as f:
            src_text = f.readlines()
        logger.info("Source text loaded. Translating.")
        translation = pipe(
            src_text,
            src_lang=NLLB_CODES[wildcards.lang],
            tgt_lang="eng_Latn")
        logger.info("Translation done. Writing to file.")
        with open(output.tgt_text, "w") as f:
            for line in translation:
                print(line['translation_text'], file=f)
        logger.info("Done.")


rule ner_with_spacy:
    input:
        "{dataset}_data/{lang}/{split}.eng"
    output:
        retokenized="{dataset}_experiments/spacy/{lang}/{split}-retok.eng",
        tags="{dataset}_experiments/spacy/{lang}/{split}.eng-tags",
    resources:
        mem="10G",
        cpus_per_task=4,
    run:
        import spacy
        logger = logging.getLogger("spacy")
        logger.setLevel(logging.INFO)

        logger.info("Loading model.")
        try:
            nlp = spacy.load("en_core_web_lg")
        except OSError:
            logger.info("Model not found. Downloading.")
            spacy.cli.download("en_core_web_lg")
            nlp = spacy.load("en_core_web_lg")

        logger.info("Model loaded. Processing input.")
        f_retokenized = open(output.retokenized, "w")
        f_tags = open(output.tags, "w")
        for line in open(input[0]):
            doc = nlp(line.strip())
            tokens = []
            tags = []
            for token in doc:
                tokens.append(token.text)
                if token.ent_iob_ == "O" or token.ent_type_ not in SPACY_TYPES:
                    tags.append("O")
                else:
                    ent_type = token.ent_type_
                    if ent_type == "PERSON":
                        ent_type = "PER"
                    elif ent_type == "GPE":
                        ent_type = "LOC"
                    elif ent_type == "TIME":
                        ent_type = "DATE"
                    elif ent_type == "FAC":
                        ent_type = "LOC"
                    tags.append(token.ent_iob_ + "-" + ent_type)
            print(" ".join(tokens), file=f_retokenized)
            print(" ".join(tags), file=f_tags)
        f_retokenized.close()
        f_tags.close()
        logger.info("Done.")


rule ner_with_tner_ontonotes5:
    input:
        "{dataset}_data/{lang}/{split}.eng"
    output:
        retokenized="{dataset}_experiments/tner-ontonotes5/{lang}/{split}-retok.eng",
        tags="{dataset}_experiments/tner-ontonotes5/{lang}/{split}.eng-tags",
    resources:
        mem="40G",
        cpus_per_task=8,
        partition="gpu-troja,gpu-ms",
        flags="--gres=gpu:1"
    shell:
        """
        sacremoses -l en -j 8 tokenize --xml-escape < {input} > {output.retokenized}
        deactivate || true
        source ../tner_env/bin/activate
        python3 apply_tner.py tner/roberta-large-ontonotes5 {output.retokenized} > {output.tags}
        """


rule ner_with_conll2003:
    input:
        "{dataset}_data/{lang}/{split}.eng"
    output:
        retokenized="{dataset}_experiments/tner-conll2003/{lang}/{split}-retok.eng",
        tags="{dataset}_experiments/tner-conll2003/{lang}/{split}.eng-tags",
    resources:
        mem="40G",
        cpus_per_task=8,
        partition="gpu-troja,gpu-ms",
        flags="--gres=gpu:1 --constraint='gpuram48G|gpuram40G|gpuram24G'"
    shell:
        """
        sacremoses -l en -j 8 tokenize --xml-escape < {input} > {output.retokenized}
        deactivate || true
        source ../tner_env/bin/activate
        python3 apply_tner.py tner/roberta-large-conll2003 {output.retokenized} > {output.tags}
        """


rule project_from_eng:
    input:
        retokenized="{dataset}_experiments/{experiment}/{lang}/{split}-retok.eng",
        tags="{dataset}_experiments/{experiment}/{lang}/{split}.eng-tags",
        target_text="{dataset}_data/{lang}/{split}.txt",
    output:
        "{dataset}_experiments/{experiment}/{lang}/{split}.orig-tags"
    resources:
        mem="40G",
        cpus_per_task=8,
        partition="gpu-troja,gpu-ms",
        flags="--gres=gpu:1 --constraint='gpuram48G'"
    run:
        from constrained_translate_with_tags import (
            project_markup, read_entities, format_entities)

        with open(input.retokenized) as f_retok:
            retokenized = f_retok.read().splitlines()
        with open(input.tags) as f_tags:
            eng_entities = read_entities(f_tags.read().splitlines())
        with open(input.target_text) as f_tgt:
            tgt_sentences = f_tgt.read().splitlines()

        projected_entities = project_markup(
            retokenized, eng_entities, tgt_sentences,
            tgt_lang=NLLB_CODES[wildcards.lang],
            model="ychenNLP/nllb-200-3.3B-easyproject",
            batch_size=8,
            max_span_len=5)

        tags = format_entities(tgt_sentences, projected_entities)

        with open(output[0], "w") as f:
            for line in tags:
                print(" ".join(line), file=f)


rule retokenize_english:
    input:
        "{dataset}/{lang}/{split}.eng"
    output:
        "{dataset}/{lang}/{split}.eng-retok"
    resources:
        mem="10G",
        cpus_per_task=4,
    shell:
        """
        sacremoses -l en -j 4 tokenize --xml-escape < {input} > {output}
        """


rule project_orig_to_eng:
    input:
        orig_text="{dataset}/{lang}/{split}.txt",
        tags="{dataset}/{lang}/{split}.tags",
        english="{dataset}/{lang}/{split}.eng-retok"
    output:
        "{dataset}/{lang}/{split}.eng-tags"
    resources:
        mem="40G",
        cpus_per_task=8,
        partition="gpu-troja,gpu-ms",
        flags="--gres=gpu:1 --constraint='gpuram48G'"
    run:
        from constrained_translate_with_tags import (
            project_markup, read_entities, format_entities)

        with open(input.orig_text) as f_orig:
            orig_lines = f_orig.read().splitlines()
        with open(input.tags) as f_tags:
            entities = read_entities(f_tags.read().splitlines())
        with open(input.english) as f_eng:
            eng_lines = f_eng.read().splitlines()

        projected_entities = project_markup(
            orig_lines, entities, eng_lines,
            src_lang=NLLB_CODES[wildcards.lang],
            tgt_lang="eng_Latn",
            model="ychenNLP/nllb-200-3.3B-easyproject",
            batch_size=8,
            max_span_len=5)

        projected_tags = format_entities(tgt_sentences, projected_entities)

        with open(input.english, "r") as f_eng, \
            open(output[0], "w") as f_out:
            for eng_line, tags in zip(f_eng, projected_tags):
                print(f"{eng_line.strip()}\t{' '.join(tags)}", file=f_out)


rule evaluate_ner:
    input:
        system_output="{dataset}_experiments/{experiment}/{lang}/{split}.orig-tags",
        gold_standard="{dataset}_data/{lang}/{split}.tags",
    output:
        score="{dataset}_experiments/{experiment}/{lang}/{split}.score",
        report="{dataset}_experiments/{experiment}/{lang}/{split}.report"
    run:
        import evaluate
        import json
        metric = evaluate.load("seqeval")

        with open(input.system_output) as f:
            outputs = [line.strip().split() for line in f]
        with open(input.gold_standard) as f:
            golds = [line.strip().split() for line in f]

        score = metric.compute(predictions=outputs, references=golds)
        for ent in ENTS:
            score[ent]["number"] = int(score[ent]["number"])

        with open(output.report, "w") as f:
            print(json.dumps(score, indent=4), file=f)
        with open(output.score, "w") as f:
            print(score['overall_f1'], file=f)


rule collect_finetuning_data:
    input:
        expand("masakhaner_data/{lang}/{split}.eng-tags",
               lang=MASAKHANER_LANGUAGES, split=["train", "validation"]),
        expand("masakhaner2_data/{lang}/{split}.eng-tags",
               lang=MASAKHANER2_LANGUAGES, split=["train", "validation"]),
    output:
        train_file="finetune_tner/train.tsv",
        validation_file="finetune_tner/validation.tsv",
        test_file="finetune_tner/test.tsv",
    shell:
        """
        set -ex
        mkdir -p finetune_tner
        cat {input} | sed -e 's/B-PER/B-PERSON/g;s/I-PER/I-PERSON/g' | \
            shuf --random-source=<(yes 1348) > finetune_tner/all.tsv
        head -n 2000 finetune_tner/all.tsv > {output.test_file}
        head -n +4000 finetune_tner/all.tsv | tail -n 2000 > {output.validation_file}
        tail -n +4001 finetune_tner/all.tsv > {output.train_file}
        rm finetune_tner/all.tsv
        """


rule format_finetuning_data:
    input:
        "finetune_tner/{split}.tsv"
    output:
        "finetune_tner/{split}.tner"
    run:
        with open(input[0]) as f_input, \
            open(output[0], "w") as f_output:
            for line in f_input:
                try:
                    text, tags = line.strip().split('\t')
                except ValueError:
                    continue
                for word, tag in zip(text.split(), tags.split()):
                    print(f'{word} {tag}', file=f_output)
                print(file=f_output)


rule finetune_tner:
    input:
        train_file="finetune_tner/train.tner",
        validation_file="finetune_tner/validation.tner",
        test_file="finetune_tner/test.tner",
    output:
        "finetune_tner/best_model"
    resources:
        mem="40G",
        cpus_per_task=12,
        partition="gpu-troja,gpu-ms",
        flags="--gres=gpu:4 --constraint='gpuram48G|gpuram40G'"
    shell:
        """
        deactivate || true
        source ../tner_env/bin/activate
        python3 custom_tner_trainer.py \
            finetune_tner \
            tner/roberta-large-ontonotes5 \
            {input.train_file} \
            {input.validation_file} \
            {input.test_file}
        """
